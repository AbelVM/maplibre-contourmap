(function(F,M){typeof exports=="object"&&typeof module<"u"?module.exports=M():typeof define=="function"&&define.amd?define(M):(F=typeof globalThis<"u"?globalThis:F||self,F["MapLibre ContourMap"]=M())})(this,function(){"use strict";const F=(a,v,$,y)=>{const j=$.reduce((m,f)=>`importScripts('${f}');
        `,""),g=`
            ${j}
            onmessage = async o => {
                let _func = ${a.toString()};
                postMessage(await _func.apply(null,[o]));
                ${!y}? 'self.close();}':'}'
            }`,h=URL.createObjectURL(new Blob([g],{type:"text/javascript"})),P=new Worker(h);return P.onmessage=v,P},M=async a=>{let v;function $(e,t,r={}){const o={type:"Feature"};return(r.id===0||r.id)&&(o.id=r.id),r.bbox&&(o.bbox=r.bbox),o.properties=t||{},o.geometry=e,o}function y(e,t,r={}){for(const o of e){if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");if(o[o.length-1].length!==o[0].length)throw new Error("First and last Position are not equivalent.");for(let s=0;s<o[o.length-1].length;s++)if(o[o.length-1][s]!==o[0][s])throw new Error("First and last Position are not equivalent.")}return $({type:"Polygon",coordinates:e},t,r)}function j(e,t={}){const r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function g(e,t){let r=!1;return j(f(e.features.map(o=>{const s={x:o.geometry.coordinates[0],y:o.geometry.coordinates[1]};return t?s.z=o.properties[t]:o.geometry.coordinates.length===3&&(r=!0,s.z=o.geometry.coordinates[2]),s})).map(o=>{const s=[o.a.x,o.a.y],i=[o.b.x,o.b.y],n=[o.c.x,o.c.y];let c={};return r?(s.push(o.a.z),i.push(o.b.z),n.push(o.c.z)):c={a:o.a.z,b:o.b.z,c:o.c.z},y([[s,i,n,s]],c)}))}var h=class{constructor(e,t,r){this.a=e,this.b=t,this.c=r;const o=t.x-e.x,s=t.y-e.y,i=r.x-e.x,n=r.y-e.y,c=o*(e.x+t.x)+s*(e.y+t.y),l=i*(e.x+r.x)+n*(e.y+r.y),d=2*(o*(r.y-t.y)-s*(r.x-t.x));let z,L;this.x=(n*c-s*l)/d,this.y=(o*l-i*c)/d,z=this.x-e.x,L=this.y-e.y,this.r=z*z+L*L}};function P(e,t){return t.x-e.x}function m(e){let t=e.length,r,o,s,i,n;e:for(;t;)for(o=e[--t],r=e[--t],s=t;s;)if(n=e[--s],i=e[--s],r===i&&o===n||r===n&&o===i){e.splice(t,2),e.splice(s,2),t-=2;continue e}}function f(e){if(e.length<3)return[];e.sort(P);let t=e.length-1;const r=e[t].x,o=e[0].x;let s=e[t].y,i=s;const n=1e-12;let c,l,d,z,L,J;for(;t--;)e[t].y<s&&(s=e[t].y),e[t].y>i&&(i=e[t].y);let x=o-r,R=i-s;const T=x>R?x:R,U=(o+r)*.5,W=(i+s)*.5,p=[new h({__sentinel:!0,x:U-20*T,y:W-T},{__sentinel:!0,x:U,y:W+20*T},{__sentinel:!0,x:U+20*T,y:W-T})],w=[],C=[];let u;for(t=e.length;t--;){for(C.length=0,u=p.length;u--;){if(x=e[t].x-p[u].x,x>0&&x*x>p[u].r){w.push(p[u]),p.splice(u,1);continue}R=e[t].y-p[u].y,!(x*x+R*R>p[u].r)&&(C.push(p[u].a,p[u].b,p[u].b,p[u].c,p[u].c,p[u].a),p.splice(u,1))}for(m(C),u=C.length;u;)l=C[--u],c=C[--u],d=e[t],z=l.x-c.x,L=l.y-c.y,J=2*(z*(d.y-l.y)-L*(d.x-l.x)),Math.abs(J)>n&&p.push(new h(c,l,d))}for(Array.prototype.push.apply(w,p),t=w.length;t--;)(w[t].a.__sentinel||w[t].b.__sentinel||w[t].c.__sentinel)&&w.splice(t,1);return w}v=g;const S=(e,t)=>{const r=new Map;return new Proxy(e,{async apply(o,s,i){const n=JSON.stringify(i);if(r.has(n)){const l=r.get(n);if(Date.now()-l.timestamp<t){const d=l.data;return r.set(n,{cd:d,timestamp:Date.now()}),d}else r.delete(n)}const c=await Reflect.apply(o,s,i);return r.set(n,{data:c,timestamp:Date.now()}),c}})};function E(e,t,r){return e[3]===t[3]?[]:r.map(s=>({break:s,p:(s-e[2])/(t[2]-e[2])})).filter(s=>s.p>=0&&s.p<=1).map(s=>(s.point=[e[0]+s.p*(t[0]-e[0]),e[1]+s.p*(t[1]-e[1])],s))}async function A(e,t){let r=await I(e[0],e[1],t),o=await I(e[1],e[2],t),s=await I(e[2],e[0],t);r=r||[],o=o||[],s=s||[];const i=[...r,...o,...s],n={};return i.forEach(c=>{n.hasOwnProperty(c.break)?n[c.break].push(c.point):n[c.break]=[c.point]}),n}const q=a.data,b={type:"FeatureCollection",features:q.features},D=q.measure,_=q.breaks,O=v(b,D),I=S(E,6e4),K=S(A,6e4),Q=O.features.map(e=>(k=e.geometry.coordinates[0],k[0].push(e.properties.a),k[1].push(e.properties.b),k[2].push(e.properties.c),k=k.map((t,r)=>{if(r>2)return t;const o=_.reduce((s,i,n)=>t[2]>=i?n+1:s,0);return t.push(o),t}),k)).filter(e=>!(e[0][3]===e[1][3]&&e[0][3]===e[2][3])),B=[];return await Promise.all(Q.map(async e=>B.push(await K(e,_)))),_.map(e=>{const t=B.filter(r=>r.hasOwnProperty(e)).map(r=>r[e]).reduce((r,o,s)=>[...r,o],[]);return{break:e,coordinates:t}})};async function N(a,v){const $={type:"MultiLineString",debug:!1,max_workers:(navigator.hardwareConcurrency?navigator.hardwareConcurrency-1:3)-this._lib.getWorkerCount()},y=Object.assign({},$,v),j=m=>{const f={type:"FeatureCollection",features:m.data.map((S,E)=>({type:"Feature",id:E,properties:{break:S.break},geometry:{type:y.type,coordinates:S.coordinates}}))};this.getSource(`contour-source-${a}`).setData(f)};this._minion=F(M,j,[],!0);const g=this.getLayer(a),h=g.source,P=m=>{if(m.sourceId===h&&m.isSourceLoaded){const f={sourceLayer:g.sourceLayer};g.getLayoutProperty("visibility")==="none"&&(y.debug&&console.warning(`The layer ${a} must be layout:visible in order to be possible to build the contour. Let's change it to paint:opacity = 0`),this.setPaintProperty(a,`${g.type}-opacity`,0),this.setLayoutProperty(a,"visibility","visible")),y.filter&&(f.filter=y.filter,f.validate=y.debug);const E=m.target.querySourceFeatures(h,f),A=E.filter((b,D,_)=>D===_.findIndex(O=>O.properties[y.measure]===b.properties[y.measure]&&O.geometry.coordinates[0]===b.geometry.coordinates[0]&&O.geometry.coordinates[1]===b.geometry.coordinates[1])),q=A.map((b,D)=>{const _=b.geometry;return{type:"Feature",id:D,properties:b.properties,geometry:_}});this._minion.postMessage({features:q,measure:y.measure,breaks:y.breaks})}};this.addSource(`contour-source-${a}`,{type:"geojson",data:{type:"FeatureCollection",features:[]}}),this.on("sourcedata",a,P),this.getSource(h).loaded()&&this.getSource(h).fire("sourcedata")}async function G(a){this.off("sourcedata",a,shoot),this._minion&&this._minion.terminate(),this.removeSource(`contour-source-${a}`)}async function H(a){a.Map.prototype._lib=a,a.Map.prototype.addContourSource=N,a.Map.prototype.removeContourSource=G}return H});
